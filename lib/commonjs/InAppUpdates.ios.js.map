{"version":3,"names":["noop","InAppUpdates","InAppUpdatesBase","checkNeedsUpdate","checkOptions","curVersion","toSemverConverter","customVersionComparator","country","appVersion","getVersion","debugLog","Siren","performCheck","then","checkResponse","JSON","stringify","version","newAppV","throwError","vCompRes","compareVersions","shouldUpdate","storeVersion","other","reason","catch","err","startUpdate","updateOptions","Promise","resolve","promptUser","versionSpecificOptions","bundleId"],"sources":["InAppUpdates.ios.ts"],"sourcesContent":["// @ts-expect-error\nimport Siren from 'react-native-siren';\n\nimport { compareVersions } from './utils';\nimport InAppUpdatesBase from './InAppUpdatesBase';\nimport type {\n  CheckOptions,\n  IosPerformCheckResponse,\n  IosStartUpdateOptions,\n  IosNeedsUpdateResponse,\n} from './types';\nimport { getVersion } from 'react-native-device-info';\n\nconst noop = () => {};\n\nexport default class InAppUpdates extends InAppUpdatesBase {\n  public checkNeedsUpdate(\n    checkOptions?: CheckOptions\n  ): Promise<IosNeedsUpdateResponse> {\n    const { curVersion, toSemverConverter, customVersionComparator, country } =\n      checkOptions || {};\n\n    let appVersion: string;\n    if (curVersion) {\n      appVersion = curVersion;\n    } else {\n      appVersion = getVersion();\n    }\n    this.debugLog('Checking store version (iOS)');\n    return Siren.performCheck({ country })\n      .then((checkResponse: IosPerformCheckResponse) => {\n        this.debugLog(\n          `Received response from app store: ${JSON.stringify(checkResponse)}`\n        );\n        const { version } = checkResponse || {};\n\n        if (version != null) {\n          let newAppV = `${version}`;\n          if (toSemverConverter) {\n            newAppV = toSemverConverter(version);\n            this.debugLog(\n              `Used custom semver, and converted result from store (${version}) to ${newAppV}`\n            );\n            if (!newAppV) {\n              this.throwError(\n                `Couldnt convert ${version} using your custom semver converter`,\n                'checkNeedsUpdate'\n              );\n            }\n          }\n          const vCompRes = customVersionComparator\n            ? customVersionComparator(newAppV, appVersion)\n            : compareVersions(newAppV, appVersion);\n\n          if (vCompRes > 0) {\n            this.debugLog(\n              `Compared cur version (${appVersion}) with store version (${newAppV}). The store version is higher!`\n            );\n            // app store version is higher than the current version\n            return {\n              shouldUpdate: true,\n              storeVersion: newAppV,\n              other: { ...checkResponse },\n            };\n          }\n          this.debugLog(\n            `Compared cur version (${appVersion}) with store version (${newAppV}). The current version is higher!`\n          );\n          return {\n            shouldUpdate: false,\n            storeVersion: newAppV,\n            reason: `current version (${appVersion}) is already later than the latest store version (${newAppV}${\n              toSemverConverter ? ` - originated from ${version}` : ''\n            })`,\n            other: { ...checkResponse },\n          };\n        }\n        this.debugLog('Failed to fetch a store version');\n        return {\n          shouldUpdate: false,\n          reason: 'Couldn\\t fetch the latest version',\n          other: { ...checkResponse },\n        };\n      })\n      .catch((err: any) => {\n        this.debugLog(err);\n        this.throwError(err, 'checkNeedsUpdate');\n      });\n  }\n\n  startUpdate(updateOptions: IosStartUpdateOptions): Promise<void> {\n    return Promise.resolve(\n      Siren.promptUser(\n        updateOptions,\n        updateOptions?.versionSpecificOptions,\n        updateOptions?.bundleId,\n        updateOptions?.country\n      )\n    );\n  }\n\n  installUpdate = noop;\n  addStatusUpdateListener = noop;\n  removeStatusUpdateListener = noop;\n  addIntentSelectionListener = noop;\n  removeIntentSelectionListener = noop;\n}\n"],"mappings":"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"}