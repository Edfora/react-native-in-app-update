{"version":3,"names":["SpInAppUpdates","NativeModules","SpInAppUpdatesOrEmpty","InAppUpdates","InAppUpdatesBase","constructor","event","resultListeners","emitEvent","bytesDownloaded","totalBytesToDownload","status","parseInt","statusUpdateListeners","callback","addListener","hasListeners","setStatusUpdateSubscription","removeListener","checkOptions","curVersion","toSemverConverter","customVersionComparator","appVersion","getVersion","debugLog","checkNeedsUpdate","then","inAppUpdateInfo","updateAvailability","versionCode","AndroidAvailabilityStatus","AVAILABLE","newAppV","throwError","vCompRes","compareVersions","shouldUpdate","storeVersion","other","reason","DEVELOPER_TRIGGERED","catch","err","updateOptions","updateType","AndroidUpdateType","FLEXIBLE","IMMEDIATE","startUpdate","installUpdate","eventEmitter","NativeEventEmitter","IN_APP_UPDATE_STATUS_KEY","onIncomingNativeStatusUpdate","IN_APP_UPDATE_RESULT_KEY","onIncomingNativeResult"],"sources":["InAppUpdates.android.ts"],"sourcesContent":["import { NativeModules, NativeEventEmitter } from 'react-native';\nimport { getVersion } from 'react-native-device-info';\n\nimport { compareVersions } from './utils';\nimport {\n  StatusUpdateEvent,\n  CheckOptions,\n  InstallationResult,\n  AndroidInAppUpdateExtras,\n  AndroidStatusEventListener,\n  AndroidIntentResultListener,\n  AndroidStartUpdateOptions,\n  AndroidAvailabilityStatus,\n  AndroidUpdateType,\n  AndroidNeedsUpdateResponse,\n} from './types';\nimport InAppUpdatesBase from './InAppUpdatesBase';\n\nconst { SpInAppUpdates } = NativeModules;\nconst SpInAppUpdatesOrEmpty: {\n  IN_APP_UPDATE_STATUS_KEY: any;\n  IN_APP_UPDATE_RESULT_KEY: any;\n} = SpInAppUpdates || {};\n\nexport default class InAppUpdates extends InAppUpdatesBase {\n  constructor() {\n    super();\n    this.eventEmitter = new NativeEventEmitter(SpInAppUpdates);\n    this.eventEmitter.addListener(\n      SpInAppUpdatesOrEmpty?.IN_APP_UPDATE_STATUS_KEY,\n      this.onIncomingNativeStatusUpdate\n    );\n    this.eventEmitter.addListener(\n      SpInAppUpdatesOrEmpty?.IN_APP_UPDATE_RESULT_KEY,\n      this.onIncomingNativeResult\n    );\n  }\n\n  protected onIncomingNativeResult = (event: InstallationResult) => {\n    this.resultListeners.emitEvent(event);\n  };\n\n  protected onIncomingNativeStatusUpdate = (event: StatusUpdateEvent) => {\n    let { bytesDownloaded, totalBytesToDownload, status } = event;\n    // This data comes from Java as a string, since React's WriteableMap doesn't support `long` type values.\n    bytesDownloaded = parseInt(bytesDownloaded, 10);\n    totalBytesToDownload = parseInt(totalBytesToDownload, 10);\n    status = parseInt(`${status}`, 10);\n    this.statusUpdateListeners.emitEvent({\n      ...event,\n      bytesDownloaded,\n      totalBytesToDownload,\n      status,\n    });\n  };\n\n  public addStatusUpdateListener = (callback: AndroidStatusEventListener) => {\n    this.statusUpdateListeners.addListener(callback);\n    if (this.statusUpdateListeners.hasListeners()) {\n      SpInAppUpdates.setStatusUpdateSubscription(true);\n    }\n  };\n\n  public removeStatusUpdateListener = (\n    callback: AndroidStatusEventListener\n  ) => {\n    this.statusUpdateListeners.removeListener(callback);\n    if (!this.statusUpdateListeners.hasListeners()) {\n      SpInAppUpdates.setStatusUpdateSubscription(false);\n    }\n  };\n\n  public addIntentSelectionListener = (\n    callback: AndroidIntentResultListener\n  ) => {\n    this.resultListeners.addListener(callback);\n  };\n\n  public removeIntentSelectionListener = (\n    callback: AndroidIntentResultListener\n  ) => {\n    this.resultListeners.removeListener(callback);\n  };\n\n  /**\n   * Checks if there are any updates available.\n   */\n  public checkNeedsUpdate = (\n    checkOptions?: CheckOptions\n  ): Promise<AndroidNeedsUpdateResponse> => {\n    const { curVersion, toSemverConverter, customVersionComparator } =\n      checkOptions || {};\n\n    let appVersion: string;\n    if (curVersion) {\n      appVersion = curVersion;\n    } else {\n      appVersion = getVersion();\n    }\n    this.debugLog('Checking store version (Android)');\n    return SpInAppUpdates.checkNeedsUpdate()\n      .then((inAppUpdateInfo: AndroidInAppUpdateExtras) => {\n        const { updateAvailability, versionCode } = inAppUpdateInfo || {};\n        if (updateAvailability === AndroidAvailabilityStatus.AVAILABLE) {\n          let newAppV = `${versionCode}`;\n          if (toSemverConverter) {\n            newAppV = toSemverConverter(versionCode);\n            this.debugLog(\n              `Used custom semver, and converted result from store (${versionCode}) to ${newAppV}`\n            );\n            if (!newAppV) {\n              this.throwError(\n                `Couldnt convert ${versionCode} using your custom semver converter`,\n                'checkNeedsUpdate'\n              );\n            }\n          }\n          const vCompRes = customVersionComparator\n            ? customVersionComparator(newAppV, appVersion)\n            : compareVersions(newAppV, appVersion);\n\n          if (vCompRes > 0) {\n            this.debugLog(\n              `Compared cur version (${appVersion}) with store version (${newAppV}). The store version is higher!`\n            );\n            // play store version is higher than the current version\n            return {\n              shouldUpdate: true,\n              storeVersion: newAppV,\n              other: { ...inAppUpdateInfo },\n            };\n          }\n          this.debugLog(\n            `Compared cur version (${appVersion}) with store version (${newAppV}). The current version is higher!`\n          );\n          return {\n            shouldUpdate: false,\n            storeVersion: newAppV,\n            reason: `current version (${appVersion}) is already later than the latest store version (${newAppV}${\n              toSemverConverter ? ` - originated from ${versionCode}` : ''\n            })`,\n            other: { ...inAppUpdateInfo },\n          };\n        } else if (\n          updateAvailability === AndroidAvailabilityStatus.DEVELOPER_TRIGGERED\n        ) {\n          this.debugLog('Update has already been triggered by the developer');\n        } else {\n          this.debugLog(\n            `Failed to fetch a store version, status: ${updateAvailability}`\n          );\n        }\n\n        return {\n          shouldUpdate: false,\n          reason: `status: ${updateAvailability} means there's no new version available`,\n          other: { ...inAppUpdateInfo },\n        };\n      })\n      .catch((err: any) => {\n        this.debugLog(err);\n        this.throwError(err, 'checkNeedsUpdate');\n      });\n  };\n\n  /**\n   *\n   * Shows pop-up asking user if they want to update, giving them the option to download said update.\n   */\n  public startUpdate = (\n    updateOptions: AndroidStartUpdateOptions\n  ): Promise<void> => {\n    const { updateType } = updateOptions || {};\n    if (\n      updateType !== AndroidUpdateType.FLEXIBLE &&\n      updateType !== AndroidUpdateType.IMMEDIATE\n    ) {\n      this.throwError(\n        `updateType should be one of: ${AndroidUpdateType.FLEXIBLE} or ${AndroidUpdateType.IMMEDIATE}, ${updateType} was passed.`,\n        'startUpdate'\n      );\n    }\n    return SpInAppUpdates.startUpdate(updateType).catch((err: any) => {\n      this.throwError(err, 'startUpdate');\n    });\n  };\n\n  public installUpdate = (): void => {\n    SpInAppUpdates.installUpdate();\n  };\n}\n"],"mappings":"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"}